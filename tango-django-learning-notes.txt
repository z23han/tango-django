pip freeze
.\Script\activate
python manage.py runserver
python manage.py migrate
python manage.py startapp polls
python manage.py sqlmigrate polls 0001
python manage.py makemigrations
python manage.py shell
python manage.py startapp app_name

3 steps to make model changes: 
	1. Change models (in models.py)
	2. python manage.py makemigrations
	3. python manage.py migrate


===================================================================================================

django-admin.py allows you to start new projects and apps, along with other commands. Within your project directory, manage.py allows you to perform administrative tasks within the scope of your project only. 

We need to create apps by typing in: 
python manage.py startapp app-name

URL patterns use regular expressions to perform matching. 

Workflows: 
	.- create project: django-admin.exe startproject xxx
	.- create application: python manage.py startapp xxx
	.- INSTALLED_APPS
	.- project urls.py
	.- app urls.py
	.- views.index: return a HttpResponse

When joning or concatenating system paths together, using os.path.join() is preferred approach. It would ensure that the correct slashes are used depending on the operating system. 

# get the absolute path of the file. 
print __file__
print os.path.dirname(__file__)
print os.path.dirname(os.path.dirname(__file__))

STATIC_URL defines the URL to access media via the web server. 
STATICFILES_DIRS allows one to specify the location of the newly created static directory on the local disk, which requires an absolute path to the static directory. 

{% static %} function call should be used whenever one wishes to reference static media within a template. We can thus include Javascript, CSS and images into the template. 

Workflows: 
	.- 	create templates folder and specify in the settings.py. And we might use {{ variable_name }} within the template. 
	.- create a new view within the views.py
	.- add logic in the view
	.- dictionary is usually used to pass template's context. 
	.- Use render() helper function to generate response. 
	.- URL mappings in the project's and application's url.py

media files setup: 
	.- place the media files in the project's static folder. 
	.- The upper directory path is specified in the project's STATICFILES_DIRS tuple within settings.py
	.- Add reference to the static media into the template. 
	.- use {% load staticfiles %} and {% static "filename" %} within the template to access the static files. 

OK, this chapter dives into details on the URL compatiblity with media and static files to be uploaded. 
Setting correct URL in the settings.py with os.path.join(BASE_URL, 'xxx') and putting it into the urlpatterns in the urls.py is very critical. 

============================================================================
CharField a field for storing character data (e.g. string), specify max_length to provide the max number of characters the field can store. 

URLField like CharField, but for resource URL. 
IntegerField
DateField. 

When importing Django models, make sure to import the project's settings by importing django and setting the environment variable DJANGO_SETTINGS_MODULE to the project setting file. Then we can call django.setup() to import the django settings. 

Workflow: 
	.- configure DATABASE and tell what database to use in settings.py
	.- create models in models.py
	.- Update admin.py to include and register new models. 
	.- python manage.py makemigrations
	.- python manage.py migrate. 

================================================================

index() inside the views.py is responsible for the main page view. 

The slugify part is intended to add another field called slug, and it is saved as it is. 
Slug function is something that connect separate words with a small line. 

Workflow: 
	.- import Page Model into views.py
	.- Create a new view in views.py, category_name_url will store the encoded category name. 
	.- create a new template called category.html
	.- update urlpatterns to map category view to a URL pattern. 

=======================================================================

This chapter is focused on the forms. 
Basic Flow: 
	.- create forms.py in rango
	.- create ModelForm class representing a form
	.- create/update view to handle form, including displaying, saving, and flagging up errors. 
	.- create/update a template to display the form
	.- add urlpattern to map the new view. 

Django provides lots of widget fields for use. We would have CharField, IntegerField, EmailField, ChoiceField, DateField, etc. 

So this is another explanation about GET and POST from tango-django app
.-:::: GET: used to retrieve resource, like webpage, image or other files. 
.-:::: POST: submits data from client's web browser to be processed, say submitting contents of a HTML form. 
.-:::: Ultimately, POST ends up mostly being programmed to create a new resource (database entry, say) on the server. This can be later accessed via HTTP GET. 


=====================================================================

User model comes with 5 primary attributes, they are
	.- username 
	.- account's password
	.- user's email
	.- user's firstname
	.- user's surname
It also comes with 
	.- is_active

To provide the user registration functionalities, we need: 
	.- Create a UserForm and UserProfileForm
	.- Add view to handle the creation of new user. 
	.- Create a template of UserForm and UserProfileForm
	.- Map URL to view 
	.- Link index to the registration page. 

For the Login functionality, we need the workflows as follows: 
	.- create a login view to handle user credential
	.- create a login template to display login form
	.- map login view to url
	.- provide link from index page. 

Django uses authenticate() function to check whether the username and password provided match to a valid user account, and the login() function to signify to Django that the user is logged in. 

HttpResponseRedirect class tells the client browser to redirect to the URL I provided as the argument. 

This chapter is basically focused on making registration and login page. In order to facilitate this chapter's implementation, we need to create a class in the model called UserProfile. Then in the views.py page, we add logic of register() to justify if the user has successfully registered; and a login() to grab the data from POST and send back to loggin. Also we have to create several template dealing with the login page and register page, and the data would be transferred to the views.py register() and login() to be obtained and those functions would be furthermore transferring the data to the index page, but with data having be obtained. 

=====================================================================

this chapter is about make a template of all the template html pages. 

It's a pretty neat way and everything gets set up so nicely. 

In the views.py page, we need to make sure that all the context for each request is made available to a Django template engine. We throughout this course use render() to achieve this goal, passing the request as a parameter. !!!!

=====================================================================

When a request to a website is made, the server sends cookies to the browser as well, and it is stored in the browser cache. When the user request new page from the server, the cookies that match to that server are sent with the request. The server then interpret the cookies as part of the request's context and generate response. 

HTTP protocol: A client computer running a web browser must establish a new network connection (TCP connection) to the server each time a resource is requested GET or POST. 

semi-permanent exchange of information. 
session ID stored as a cookie on a client computer, instead of username, passwords ... Session ID can be considered as a token (sequence of characters) to identify a unique session within a web application. 

The session ID can be mapped to a data structure on the web server. And within that data structure, we can store all of the information I require. 

If the browser supports cookies, much all websites create a new session for us to visit. 

Things to consider about for session 
	.- store session for persistence over a series of browsers or disregarded 
	.- Storing cookies means storing them on client's computer. 
	.- clients can set the securities setting for cookies blocking. 

For client-side cookies checking
	.- request.COOKIES.has_key('cookie_name')
	.- request.COOKIES['xxx']
	.- response.set_cookie('cookie_name', value)

More secured cookies: MIDDLEWARE_CLASSES in settings
check: requests.sessions.get()
update or set cookie: requests.session['cookie_name']

===============================================================

we wanna show different categories in the sidebar
	.- in the base.html, add code to display an item list of categories. 
	.- In each view, we could access the Category object, to get all the categories, and return the context dictionary. 

Azure API key: ApuwFvz3HUc9geDI5E5koYH4A1ntm6XKl/YkWAgPwds

